#include <ESP8266WiFi.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

//LCD

LiquidCrystal_I2C lcd(0x27, 16, 2);  

//Servo
int servoPin=15;
int LOCK=180;
int UNLOCK=90;
int servoPos=0;

Servo myservo;

// Replace with your network credentials
const char* ssid     = "Kido Guest_5GHz";
const char* password = "0183552313";

const char* correctUsername = "admin";
const char* correctPassword = "password";
bool isAuthenticated = false;

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String output15State = "off";

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Hello, World!");
  myservo.attach(servoPin);
  Serial.begin(9600);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();         
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {// Check if the client is authenticated
            if (!isAuthenticated) {
              // Check if the client sent the login credentials
              if (header.indexOf("GET /auth") >= 0) {
                // Send the login page HTML
                // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
                // and a content-type so the client knows what's coming, then a blank line:
                client.println("HTTP/1.1 200 OK");
                client.println("Content-type:text/html");
                client.println("Connection: close");
                client.println();
                client.println("<!DOCTYPE html><html><body>");
                client.println("<h1>Login</h1>");
                client.println("<form action='/login' method='POST'>");
                client.println("Username: <input type='text' name='username'><br>");
                client.println("Password: <input type='password' name='password'><br>");
                client.println("<input type='submit' value='Login'>");
                client.println("</form>");
                client.println("</body></html>");
                client.println();
                client.stop();
                return;
              }

            // Handle authentication form submission
            if (header.indexOf("POST /login") >= 0) {
                int usernameIndex = header.indexOf("username=");
                int passwordIndex = header.indexOf("&password=");

                if (usernameIndex >= 0 && passwordIndex >= 0) {
                String username = header.substring(usernameIndex + 9, passwordIndex);
                String password = header.substring(passwordIndex + 10);

                if (username.equals(correctUsername) && password.equals(correctPassword)) {
                    isAuthenticated = true;
                }
                }

                // Redirect to main GPIO page after authentication
                client.println("HTTP/1.1 302 Found");
                client.println("Location: /");
                client.println();
                client.stop();
                return;
            }

            client.stop();
            return;
            }
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /15/on") >= 0) {
              Serial.println("GPIO 15 on");
              output15State = "on";
              myservo.write(UNLOCK);
              lcd.clear();
              lcd.setCursor(0,1);
              lcd.print("DOOR UNLOCKED");
            } else if (header.indexOf("GET /15/off") >= 0) {
              Serial.println("GPIO 15 off");
              output15State = "off";
              myservo.write(LOCK);
              lcd.clear();
              lcd.setCursor(0,1);
              lcd.print("DOOR LOCKED");
            } 
 
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #77878A;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ESP8266 Web Server</h1>");
            
            // Display current state, and ON/OFF buttons for GPIO 15  
            client.println("<p>GPIO 15 - State " + output15State + "</p>");
            // If the output15State is off, it displays the ON button       
            if (output15State=="off") {
              client.println("<p><a href=\"/15/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/15/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
            
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}